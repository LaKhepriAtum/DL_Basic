# -*- coding: utf-8 -*-
"""exam06_matpoltlib_visualization02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10jGcjSDIBp_8Vaye2jCnCa0cZDUfsAXk
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
plt.rcParams['figure.dpi'] = 60

point = 100
X = list(range(-50,50))
X = list(map(lambda x: x/10, X))
Y = list(map(np.sin, X))
# X = np.linspace(-10, 10, point)
# Y = 3 * X +1
# Y = X * X + 2
fig = plt.figure(figsize = (5,5))
ax = fig.add_axes([0,0,1,1])
ax.plot(X,Y, '-', markerfacecolor = 'g', color = 'k', linewidth=2)
plt.axhline(color = 'k')
plt.axvline(color = 'k')
plt.show()

a = list(range(10))
print(a)

b = []
for i in a:
  b.append(3 * a[i] +2)
print(b)

def func1(x):
  return 3 * x +2
c = map(func1, a) # a의 요소 하나하나에 func1을 적용하여 list처럼 생긴 map 객체로 반환
print(list(c))

d = map(lambda x : 3 * x + 2, a)
print(list(d))

d = map(str, a)
print(list(d))

a = input()
a = a.split()
a = map(int, a)
a = list(a)
print(list(a))
print(type(a[0]))

a = list(map(int , input().split()))
print(a)

point = 50
X = np.linspace(-5, 5, point)
fig = plt.figure(figsize = (8,5))
ax = fig.add_axes([0,0,1,1])

n = 50
x = np.random.rand(n) * 10 - 5 #np.random.rand(n) = 무작위로 0 ~ 1 의 값 반환 -> -5 ~ 5
y = np.random.rand(n) * 35 - 10 # -10 ~ 25
custom_colors = np.random.rand(n) # 색상도 random (숫자로 표현 가능)
area = (30* np.random.rand(n)) ** 2 # 0~ 900 의 점 크기
ax.scatter(x,y, s = area, c = custom_colors, alpha = 0.5) # s  = 점의 크기, alpha = 점의 투명도

ax.plot(X, 2 * X +3, '-rD', X, np.sin(X)*10, '-b^', X, X ** 2, '-gs')
plt.axhline(color = 'black', linewidth = 1)
plt.axvline(color = 'black', linewidth = 1)
plt.show()

import math
def sigmoid(x):
  sig = 1 / (1 + math.exp(-x))
  return sig

point = 100
X = np.linspace(-10, 10, point)
Y = list(map(sigmoid, X))

fig = plt.figure(figsize = (8,5))
ax = fig.add_axes([0, 0, 1, 1])
np.random.seed(200)

N = 50
n = 50
x = np.random.rand(n) * 20 - 10 
y = np.random.rand(n) * 1.4 - 0.2 
custom_colors = np.random.rand(n) # 색상도 random (숫자로 표현 가능)
area = (30* np.random.rand(n)) ** 2 # 0~ 900 의 점 크기
ax.scatter(x,y, s = area, c = custom_colors, alpha = 0.5) # s  = 점의 크기, alpha = 점의 투명도
ax.plot(X, Y, color = 'r', linewidth = 2)

ax.fill_between(X, list(map(lambda Y:Y+0.25, Y)),
                list(map(lambda Y:Y-0.25, Y)), 
                facecolor = 'r', edgecolor = 'None', alpha = 0.15)

plt.axhline(color = 'k', linewidth = 1)
plt.axvline(c = 'k', linewidth = 1)
ax.set_title('Sigmoid')

labels = 'Frogs', 'Hogs', 'Hogs', 'Logs'
sizes = [15, 30, 45, 10]

fig1, ax1 = plt.subplots(figsize=(7,7))
explode = (0, 0.1, 0, 0) # 2번째의 것이 조금 튀어 나온다

wedges, texts, autotexts = ax1.pie(sizes, labels = labels, explode = explode, 
        shadow = True, startangle = -90, autopct = '%1.1f%%') #autopct = '%1.1f'-> 소수점 아래 몇 자리, %==format문자, f == float, %% == %를 찍어라
ax1.axis('equal')
# wedges[0].set(hatch = '///', alpha = 0.1)
# wedges[2].set_radius(1.1) # 반지름의 크기 변동
# wedges[3].set_theta1(90) # 시작점의 위치 지정 
# wedges[3].set_theta2(100) # 끝나는 점의 위치 지정
plt.show()

size = 0.3
vals1 = [40, 35, 25]
vals2 = [11, 29, 12, 23, 12, 13]

cmap = plt.get_cmap('tab20c') # 해당하는 색상
outer_colors = cmap([0,4,8])
inner_colors = cmap([1,2,5,6,9,10])

fig = plt.figure (figsize = (8,5))
ax = fig.add_axes([0,0,1,1])

ax.pie(vals1, radius = 1, colors = outer_colors, 
       labels = ['male', 'female', 'pet'], 
       autopct = '%1.1f%%', pctdistance = 0.83, # pctdistance = 적은 %가 얼마나 떨어질지
       textprops = {'color':'red'}, 
       wedgeprops = {'width':size, 'edgecolor':'w','linewidth':5},# 도넛 모양 만들기,
       startangle = 0,
       counterclock = False, # 시계방향
       rotatelabels = True
       ) 
ax.pie(vals2, radius = 1-size, colors = inner_colors,  
       autopct = '%1.1f%%', pctdistance = 0.8, # pctdistance = 적은 %가 얼마나 떨어질지
       textprops = {'color':'w'}, 
       wedgeprops = {'width':size, 'edgecolor':'w','linewidth':5},# 도넛 모양 만들기,
       startangle = 0,
       counterclock = False, # 시계방향
       rotatelabels = True) 

plt.show()

cmap= 'magma_r'
fig= plt.figure(figsize=(8,5))
ax= fig.add_axes([0,0,1,1] , frameon=False, xticks=[], yticks=[]
                 )
Z= np.linspace(0,1,512).reshape(1, 512) # 0~1의 값을 512개 쪼갠 것, reshape = 2차원을 만들기 위해 각각을 감싼 것
plt.imshow(Z,extent=[0, 30, 0, 5], cmap=plt.get_cmap(cmap))
plt.show()

color = {}
for name, hex_value in mpl.colors.cnames.items():
  print(name, hex_value)

# plt.style.use('seaborn-dark-palette')
plt.style.available

plt.colormaps()

cmaps={}

gradient = np.linspace(0, 1, 256)
gradient= np.vstack((gradient, gradient))

def plot_color_gradients(category, cmap_list):
  nrows = len(cmap_list)
  figh = 0.35 + 0.15 + (nrows+(nrows-1)*0.1) * 0.22
  fig, axs= plt.subplots(nrows=nrows+1, figsize=(6.4, figh))
  fig.subplots_adjust(top=1-0.35/figh, bottom=0.15/figh, left=0.2, right=0.99)
  axs[0].set_title(f'{category} colormaps', fontsize=14)
  for ax, name in zip(axs, cmap_list):
    ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))
    ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10, transform=ax.transAxes)
  for ax in axs:
    ax.set_axis_off()
  cmaps[category] = cmap_list

plot_color_gradients('Perceptually Uniform Sequential', ['viridis', 'plasma', 'inferno', 'magma', 'cividis'])

plot_color_gradients('Sequential', ['Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds', 'YlOrBr'])



N = 10
X = list(range(N))
Y1 = np.random.uniform(1,7,N) # 1 ~ 6 까지의 숫자가 모든 확률이 동일하게       random.nomal(평균, 표준편차, N) 표준편차 6sig = 99.7%, +-sig 68.3%
Y2 = np.random.uniform(1,7,N) # 1 ~ 6 까지의 숫자가 모든 확률이 동일하게       random.nomal(평균, 표준편차, N) 표준편차 6sig = 99.7%, +-sig 68.3%

fig = plt.figure(figsize = (8,5))
ax = fig.add_axes([0,0,1,1])
plt.style.use('seaborn-colorblind')

ax.bar(X, Y1, 1, facecolor = '#9999ff', edgecolor = 'w')
ax.bar(X, -Y2, 1, facecolor = '#7777ff', edgecolor = 'w')
ax.set_title('Bar plot', fontdict = {'fontsize':30})

plt.show()

N = 5
menMeans = (20, 35, 30, 35, -27)
womenMeans = (25, 32, 34, 20, -25)
menStd = (2, 3, 4, 1, 2)
womenStd = (3, 5, 2, 3, 3)

ind = np.arange(N) # array 객체를 만들어 준다 범위로
width = 0.35

fig = plt.figure(figsize = (8,5))
ax = fig.add_axes([0,0,1,1])
p1 = ax.bar(ind, menMeans, width, yerr = menStd, label = "Men") #표준편차 리스트를 넣는 골:yerr

p2 = ax.bar(ind, womenMeans, width, yerr = womenStd, label = "Women", bottom = menMeans)

ax.axhline(0, color = 'grey', linewidth = 0.8)
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.legend()
plt.show()

width = 0.35

fig = plt.figure(figsize = (8,5))
ax = fig.add_axes([0,0,1,1])
p1 = ax.bar(ind - width/2, menMeans, width, yerr = menStd, label = "Men") #표준편차 리스트를 넣는 골:yerr

p2 = ax.bar(ind + width/2, womenMeans, width, yerr = womenStd, label = "Women")

ax.axhline(0, color = 'grey', linewidth = 0.8)
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.legend()
plt.show()

titanic = sns.load_dataset('titanic')
titanic_age = titanic[['age', 'survived']].dropna()
print(titanic_age.head())
print(titanic_age.info())
print(titanic_age.age.max())

def age_band(num):
  for i in range(1, 10):
    if num < 10 * i:
      return f'under {i*10}' 
titanic_age['age_band'] = titanic_age['age'].apply(age_band)
print(titanic_age.head())

titanic_age = titanic_age[[
                           'age_band','survived']].groupby('age_band')[
                          'survived'].value_counts().sort_index().unstack().fillna(0)
titanic_age['Survival rate'] = \
titanic_age[1]/(titanic_age[0]+titanic_age[1]) * 100        
print(titanic_age)          
print(type(titanic_age))

from matplotlib.ticker import FuncFormatter
fig, ax = plt.subplots(1,2, figsize =(16,5))
# bar1
ax[0].bar(titanic_age.index, titanic_age['Survival rate'], 
          color = 'gray')
ax[0].set_title('Age Band & Survival Rate(Before)')

#bar2
# with plt.xkcd(2): 차트 모양을 다르게
color_map = ['gray']* 9
color_map[0] = color_map[8] = '#3caea3'
ax[1].bar(titanic_age.index, titanic_age['Survival rate'], 
          color = color_map , edgecolor = 'k',
          linewidth = 1.2,
          alpha = 0.7 # 투명도
          )
ax[1].set_title('Age Band & Survival Rate(After)', fontsize = 15, fontweight = 'bold', position=(0.5, 1.0+0.1))
for i, rate in enumerate(titanic_age['Survival rate']):
  ax[1].annotate(f'{rate:.02f}%', xy=(i, rate +3), # .02f = 소수점 나타내기
                va = 'center', ha = 'center',
                fontweight = 'bold', color = '#383838')

ax[1].yaxis.set_major_formatter(FuncFormatter(lambda y, a:f'{y}%'))
ax[1].set_xticklabels(titanic_age.index, rotation=45, size = 10)
plt.suptitle('* Focus on survival rates of young & old',
            x = 0.72, y = 0.95, color = 'gray') #suptitle-> super title, 전체의 title 
          
plt.subplots_adjust(left = 0.5, right = 0.8)
plt.tight_layout()

plt.show()

titanic_embarked = titanic[['embarked', 'survived', 'sex']].dropna()
titanic_embarked.info()

titanic_embarked = titanic[['embarked', 'survived', 'sex']].dropna()
titanic_embarked.info()
titanic_embarked = titanic_embarked.groupby('embarked')['survived'].value_counts().sort_index()
type(titanic_embarked)
titanic_embarked

x_value = ['-'.join(map(str, i)) for i in titanic_embarked.index] #각 index를 i 에 넣은 것을 str로 바꾼 후 -로 join =>['C-0', 'C-1', 'Q-0', 'Q-1', 'S-0', 'S-1']

# fig, ax = plt.subplots(1, 1, figsize = (8,5))
# ax.bar(x_value, list(titanic_embarked),
#        color = '#e0e0e0', width = 0.52, edgecolor = 'k')
# ax.set_xticklabels(['die', 'survived']*3)
# custom_color = ['g', 'b', 'orange']
# span_range = [[0.1], [2,3], [4,5]]
# for idx, sub_title in enumerate(['Cherbourg', 'Queenstown', 'southampton']):
#   ax.axvspan(span_range[idx][0]-0.4, span_range[idx][1]+0.4, color = custom_color, alpha = 0.07)
#   # ax.annotate(subtitle, )
# plt.show()

fig, ax= plt.subplots(1,1,figsize=(8,5))
ax.bar(x_value, list(titanic_embarked), color='#e0e0e0', width=0.52, edgecolor = 'k')
ax.set_xticklabels(['die', 'survived']*3)
custom_color=['g','b','r']
span_range=[ [0,1], [2,3],[4,5]]
for idx, sub_title in enumerate(
  ['Cherbourg', 'Queenstown', 'Southampton']):
  ax.axvspan(span_range[idx][0]-0.4, span_range[idx][1]+0.4, color=custom_color[idx], alpha=0.01)

plt.show()

